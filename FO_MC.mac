/*
Code for performing model checking for FO^5-formulas (five variable fragment of FO).
@Reijo Jaakkola
@reijo.jaakkola@tuni.fi
*/

/*
As usual, connectives are denoted by
U = forall, E = exists, ! = not, & = and, | = or, ->, if...then, <-> = iff
*/

/*
Safe(r) version of charat. Checks whether the given index is legal,
and in positive case calls charat.

@param[in]	A		String
@param[in]	index 

@return				false, if index is illegal, and charat(A,index) otherwise.
*/
safeCharat(A,index):=block([],
	if (not(stringp(A)) or index < 1 or index > slength(A)) then (
		return(false))
	else (
		return(charat(A,index))))$

/*
Safe(r) version of substring. Checks whether the given indexes are lega,
and in positive case calls substring.

@param[in]	A			String
@param[in]	startIndex
@param[in]	endIndex

@return				false, if indexes were illegal, and substring(A, startIndex, endIndex) otherwise.
*/
safeSubstring(A,startIndex,endIndex) := block([],
	if (not(stringp(A)) or startIndex < 1 or endIndex > slength(A) + 1 or startIndex > endIndex) then (
		return(false))
	else (
		return(substring(A,startIndex,endIndex))))$

/*
Function which removes all the given characters from a given string.
Does not affect the original string.

@param[in]  CHAR    Characters that should be removed.
@param[in]  S       String for which we want to do the clearing.

@return             Cleared string.
*/
ClearString(CHAR,S):=block([],
    for i:1 thru length(CHAR) do (
        S: sremove(CHAR[i],S)
    ),
    return(S))$

/*
Function which checks whether a given formula contains any logical constants.

@param[in]  F       The given formula.

@return             True iff F has no logical constants.
*/
NotContainsLogicalConstants(F):=block([Formula],
    cleanedFormula: ClearString(["U","E","!","&","|","->","<->"],F),
    if (slength(cleanedFormula) = slength(F)) then (return(true))
    else (return(false)))$

/*
Function for finding the index where the innermost (binary) connective
in a formula begins.

@param[in]  F   Formula for which we whish to find the innermost operation.

@return         Index for the innermost operator, or -1 if none found.
*/
InnerMostOperator(F) := block([index, c],
    index: -1,
    c: 0,
    for i:1 thru slength(F) do (
        if(charat(F,i)="(") then (  
            c: c + 1
        )
        else if(charat(F,i)=")") then (
            c: c - 1
        )
        /* Inner most operation is located in the place where c = 1. */
        else if((charat(F,i)="&" or charat(F,i)="|" or charat(F,i)="-" or charat(F,i)="<") and c=1) then (
            index: i,
            /* Here to end the loop (why break does not work???). */
            i: slength(F)
        )
   ),
   return(index))$

/*
Function which verifies whether a given string represents an FO atomic formula.

@param[in] F				String
@param[in] vocabulary       Set of relation symbols F can contain.
@param[in] variables		Set of variables that F can contain.

@return 					True iff F represents an FO atomic formula.
*/	
isFoAtomicFormula(F, vocabulary, variables) := block([variableTuple, valid],
	if (slength(F) < 4) then (
		return(false)
	),
	if not elementp(charat(F,1),vocabulary) then (
		return(false)
	),
	variableTuple: safeSubstring(F,2,slength(F)+1),
	if not charat(variableTuple,1) = "(" or not charat(variableTuple, slength(variableTuple)) = ")" then (
		return(false)
	),
	variableTuple: safeSubstring(variableTuple,2,slength(variableTuple)),
	valid: true,
	for i:1 thru slength(variableTuple) do (
		if not charat(variableTuple, i) = "," then (
			if not elementp(charat(variableTuple, i),variables) then (
				valid: false))),
	return(valid))$
	
/*
Function which verifies whether a given string represents a FO formula.

@param[in] F				String
@param[in] vocabulary       Set of relation symbols F can contain.
@param[in] variables		Set of variables that F can contain.

@return 					True iff F represents a FO formula.
*/	
isFoFormula(F, vocabulary, variables):=block([],
	if (not(stringp(F))) then (
		return(false)),
	if (NotContainsLogicalConstants(F)) then (
		return(isFoAtomicFormula(F, vocabulary, variables)))
	else if (safeCharat(F,1) = "!") then (
		return(isFoFormula(safeSubstring(F,2,slength(F)+1), vocabulary, variables)))
	else if (safeCharat(F,1) = "U" or safeCharat(F,1) = "E") then (
		if (not(elementp(safeCharat(F,2), variables))) then (
			return(false))
		else (
			return(isFoFormula(safeSubstring(F,3,slength(F)+1), vocabulary, variables))))
	else (
		D: InnerMostOperator(F),
		if (safeCharat(F,D) = "|" or safeCharat(F,D) = "&") then (
			return(isFoFormula(safeSubstring(F,2,D),vocabulary,variables) and isFoFormula(safeSubstring(F,D+1,slength(F)),vocabulary,variables)))
		else if (safeCharat(F,D) = "-") then (
			return(isFoFormula(safeSubstring(F,2,D),vocabulary,variables) and isFoFormula(safeSubstring(F,D+2,slength(F)),vocabulary,variables)))
		else if (safeCharat(F,D) = "<") then (
			return(isFoFormula(safeSubstring(F,2,D),vocabulary,variables) and isFoFormula(safeSubstring(F,D+3,slength(F)),vocabulary,variables)))
		else (
			return(false))))$

/*
Function which returns the set of variables that appear in an atomic formula
in the same order that they appear in the formula with possibly containing duplicates.

Assumes that the given string really represents correctly an atomic formula.
Assumes that all relational symbols have length one. Same for variables.

@param[in]  F   The given formula.

@return         List of variables that appear in F.
*/
VariablesAtomicFormula(F):=block([FREE, i],
    /*If the length of F is 3, then it is of the form x=y*/
    if(slength(F)=3) then
    (return([charat(F,1),charat(F,3)]))
    else(
        FREE: makelist(0,0),
        /*charat(F,1) = relation symbol, charat(F,2) = "(", so start at i = 3.*/
        i:3,
        while(not(charat(F,i)=")")) do
        /*Everything that is not comma is treated as a variable.*/
        (if(not(charat(F,i) = ",")) then
            (push(charat(F,i),FREE)),
        i:i+1),
        FREE: reverse(FREE),
        return(FREE)))$

/*
Function which returns the set of variables that appear in a formula
as a list.

@param[in] F	The given formula.
*/
freeVariables(F) := block([variable, subformula, freeVariablesOfSubFormula],
	if NotContainsLogicalConstants(F) = true then (
		return(listify(setify(VariablesAtomicFormula(F)))))
	else if safeCharat(F, 1) = "U" or safeCharat(F, 1) = "E" then (
		variable: safeCharat(F, 2),
		subformula: safeSubstring(F, 3, slength(F) + 1),
		freeVariablesOfSubFormula: freeVariables(subformula),
		return(delete(variable, freeVariablesOfSubFormula)))
	else (
		D: InnerMostOperator(F),
		if (safeCharat(F,D) = "|" or safeCharat(F,D) = "&") then (
			return(listify(union(setify(freeVariables(safeSubstring(F,2,D))), setify(freeVariables(safeSubstring(F,D+1,slength(F))))))))
		else if (safeCharat(F,D) = "-") then (
			return(listify(union(setify(freeVariables(safeSubstring(F,2,D))), setify(freeVariables(safeSubstring(F,D+2,slength(F))))))))
		else if (safeCharat(F,D) = "<") then (
			return(listify(union(setify(freeVariables(safeSubstring(F,2,D))), setify(freeVariables(safeSubstring(F,D+3,slength(F))))))))
		else (
			return(false))))$

/*
We assume for the rest of code that every relational symbol
has length one.

In the rest of the code we treat models as tuples of the form
    [A,R_1^A,...,R_n^A],
where A is a set and each R_i^A is of the form 
    [R,{[a_1^1,...,a_m^1],...,[a_1^k,...,a_m^k]}].
Note that in particular our vocabulary is purely relational.
*/

/*
Function which returns the interpretation for a given
relation symbol in a given model.

@param[in]  Model
@param[in]  R       The relational symbol.

@return             The interpretation for the symbol R or false if there is no interpretation
                    for that symbol.
*/
InterpretationFor(Model,R):=block([], return(assoc(R,Model[2])))$

/*
Since we are concentrating on FO^5, we fix that the set of variables that can appear
are from the set
    {x,y,z,w,u}
An assignment for model M will be understood in the rest of the code to be of the form
    [[x,a],[y,b],[z,c],[w,d],[u,e]],
where a,b,c,d,e are from the domain of M (i.e. with previous notation from A). In particular
we assume that for the rest of the code that assignments always interpretate every possible variable
(note that by the locality of FO this is possible). Also, since assignments are basically
dictionaries, to obtain the interpretation for variable, say x,
we can just call assoc(x,Assignment).
*/

/*
Function for verifying whether a given assignment for a given model satisfies a given
atomic formula in that model.

Note that the function returns either 0 or 1. This makes model checking calculations
easier for more complex formulas.

@param[in]  Model
@param[in]  Assignment
@param[in]  AtomicFormula

@return                     Returns false if the Assignment does not contain interpretations for all the free variables in the atomic formula.
                            Returns 1 if the assignment satisfies the atomic formula, and 0 otherwise.
*/
IsAtomicFormulaTrue(Model, Assignment, AtomicFormula):=block([tupleOfVariables, validAssignment, firstVar, secondVar, symbol, interpretationForSymbol, interpretationForTuple],
    /* First get the variables that appear in the atomic formula
    in the order that they appear. */
    tupleOfVariables: VariablesAtomicFormula(AtomicFormula),
	/* Verify that the assignment contains an interpretation for all of them. */
	validAssignment: true,
	for i:1 thru length(tupleOfVariables) do (
		if (assoc(tupleOfVariables[i],Assignment) = false) then (
			validAssignment: false)),
	if (validAssignment = false) then (
		return(false)),
    /* Check first whether we are dealing with an identity. */
    if(slength(AtomicFormula)=3) then(
        /* Identity claims contain two variables (which can be the same). */
        firstVar: tupleOfVariables[1],
        secondVar: tupleOfVariables[2],
        /* Verify that the two variables receive the same interpretation. */
        if(is(assoc(firstVar,Assignment)=assoc(secondVar,Assignment))) then
        (return(1))
        else
        (return(0)))
    else(
        /* Obtain the relational symbol that appears in the atomic formula.
        since the length of relation symbols is one (by assumption), we
        know where to find the relational symbol. */
        symbol: charat(AtomicFormula,1),
        /* Obtain the interpretation for the relational symbol. */
        interpretationForSymbol: InterpretationFor(Model, symbol),
        /* From the assignment and the tupleOfVariables obtain the tuple of elements 
        of the given model that represents the interpretation under the given
        assignment for the variables that appear in the atomic formula. */
        interpretationForTuple: makelist(0,0),
        for i:1 thru length(tupleOfVariables) do(
            interpretationForTuple: push(assoc(tupleOfVariables[i],Assignment),interpretationForTuple)),
        /* Since we used push, we have to reverse the tuple to get matching interpretation. */
        interpretationForTuple: reverse(interpretationForTuple),
        /* Check whether interpretationForTuple belongs to the interpretation for the relational symbol. */
        if(elementp(interpretationForTuple,interpretationForSymbol)) then
        (return(1))
        else
        (return(0))))$
        
/*
Function for verifying whether a given assignment for a given model satisfies a given
FO^5-formula in that model.

Note that the function returns either 0 or 1. This makes model checking calculations
easier for more complex formulas.

@param[in]  Model
@param[in]  Assignment
@param[in]  Formula

@return                     1 if the assignment satisfies the formula, and 0 otherwise.
*/
IsFormulaTrue(Model, Assignment, Formula):=block([IsTrue, ModelDomain, D, u, w],
    /* If the formula does not contain logical constants, then it must
    be an atomic formula. We have a different function for that. */
	if(NotContainsLogicalConstants(Formula)) then
    (return(IsAtomicFormulaTrue(Model, Assignment, Formula)))
    /* Next case is the case of negation. This is simple: return 1 - the result of recursive 
    call without the negation. */
    else if(charat(Formula,1)="!") then
    (return(1-(IsFormulaTrue(Model, Assignment, sremovefirst("!",Formula)))))
    /* Next we have the cases for universal and existential quantification.
    First universal quantification. */
    else if(charat(Formula,1)="U") then(
        IsTrue: 1,
        previousValue: assoc(charat(Formula,2),Assignment),
        if (not previousValue = false) then (
			/*The variable had already an interpretation, so remove it from the assignment since we are going to update it anyway.*/
			Assignment: delete([charat(Formula,2), previousValue], Assignment)),
        /* Recall that a model is a pair where the first part is the domain.
        Since it is a set, we should first listify it. */
        ModelDomain: listify(Model[1]),
        /* Verify that every element of the model satisfy the next subformula. */
        for i:1 thru length(ModelDomain) do(
            if(IsFormulaTrue(Model, cons([charat(Formula,2),ModelDomain[i]],Assignment),substring(Formula,3,slength(Formula)+1))=0) then
            (IsTrue: 0, i: length(ModelDomain))),
        return(IsTrue))
    /* Next case is the existential quantification. */
    else if(charat(Formula,1)="E") then(
        IsTrue: 0,
        previousValue: assoc(charat(Formula,2),Assignment),
        if (not previousValue = false) then (
			/*The variable had already an interpretation, so remove it from the assignment since we are going to update it anyway.*/
			Assignment: delete([charat(Formula,2), previousValue], Assignment)),
        /* Recall that a model is a pair where the first part is the domain.
        Since it is a set, we should first listify it. */
        ModelDomain: listify(Model[1]),
        /* Verify that at least one element of the domain satisfies the formula. */
        for i:1 thru length(ModelDomain) do(
            if(IsFormulaTrue(Model, cons([charat(Formula,2),ModelDomain[i]],Assignment),substring(Formula,3,slength(Formula)+1))=1) then
            (IsTrue: 1, i: length(ModelDomain))),
        return(IsTrue))
    else(
        /* Rest of the cases are the different binary connectives. These should be
        self-explanatory: calculate the values recursively for the two subformulas
        and then use those to determine the truth value of the original formula. */
        D:InnerMostOperator(Formula),
        if(charat(Formula,D)="|") then (
            u:IsFormulaTrue(Model, Assignment, substring(Formula,2,D)),
            w:IsFormulaTrue(Model, Assignment, substring(Formula,D+1,slength(Formula))),
            return(u+w-u*w))
        else if(charat(Formula,D)="&") then (
            u:IsFormulaTrue(Model, Assignment, substring(Formula,2,D)),
            w:IsFormulaTrue(Model, Assignment, substring(Formula,D+1,slength(Formula))),
            return(u*w))
        else if(charat(Formula,D)="-") then (
            u:IsFormulaTrue(Model, Assignment, substring(Formula,2,D)),
            w:IsFormulaTrue(Model, Assignment, substring(Formula,D+2,slength(Formula))),
            return(1-u+w-(1-u)*w))
        else (
            u:IsFormulaTrue(Model, Assignment, substring(Formula,2,D)),
            w:IsFormulaTrue(Model, Assignment, substring(Formula,D+3,slength(Formula))),
            return((1-u+w-(1-u)*w)*(1+u-w-u*(1-w))))))$

/*

*/
subtuplesUtils(subtuples, tuple, len, depth, subtuple) := block([],
	if (length(subtuple) = len) then (
		subtuples: push(subtuple, subtuples)),
	if (depth = (length(tuple))) then (
		return(subtuples))
	else (
		for i:1 thru length(tuple) do (
			subtuple: push(tuple[i],subtuple),
			subtuples: subtuplesUtils(subtuples, tuple, len, depth + 1, subtuple),
			pop(subtuple)),
		return(subtuples)))$

/*
@param[in] tuple
@param[in] len

@return     List of subtuples of given length.
*/
subtuples(tuple, len):=block([subtuples, depth, subtuple],
    subtuples: makelist(0,0),
	depth: 0,
	subtuple: makelist(0,0),
	return(subtuplesUtils(subtuples,tuple,len,depth,subtuple)))$

/*
Evaluate an FO^5 formula over the given model by returning the set of tuples of 
elements of model that satisfy the formula. Probably goes without saying, but even for small models
this is a very time consuming function.

@param[in]  Model
@param[in]  Formula

@return     List of tuples that satisfie the given formula on the model.
*/
FOQuery(Model, Formula):=block([freeVariables, ModelDomain, tuples, satTuples, assignment],
	/*Get the free variables of the formula.*/
	freeVariables: freeVariables(Formula),
    /* Recall that a model is a pair where the first part is the domain.
    Since it is a set, we should first listify it. */
    ModelDomain: listify(Model[1]),
    /* Obtain all the subtuples of ModelDomain that have length five. */
    tuples: subtuples(ModelDomain, length(freeVariables)),
    /* Initialize the list of satisfying assignments. */
    satTuples: makelist(0,0),
    /* Go through all the tuples and check which one of them satisfy the formula. */
    for i:1 thru length(tuples) do (
        /* Create an assignment from the tuple. */
		assignment: makelist(0,0),
		for j:1 thru length(freeVariables) do (
			assignment: push([freeVariables[j],tuples[i][j]],assignment)),
        if (is(IsFormulaTrue(Model, assignment, Formula) = 1)) then (
            satTuples: cons(tuples[i], satTuples))),
    return(setify(satTuples)))$
    
/*
Lazy version of FOQuery, which returns empty list if there is no satisfying assignment,
and otherwise a single satisfying assignment.

@param[in]  Model
@param[in]  Formula

@return                 Satisfying assignment, if there is one, and an empty list otherwise.
*/
LazyFOQuery(Model, Formula):=block([ModelDomain, tuples, satTuple, assignment],
    /* Recall that a model is a pair where the first part is the domain.
    Since it is a set, we should first listify it. */
    ModelDomain: listify(Model[1]),
    /* Obtain all the subtuples of ModelDomain that have length five. */
    tuples: subtuples(ModelDomain),
    /* The satisfying assignment. */
    satTuple: [],
    /* Go through all the tuples and check which one of them satisfy the formula. */
    for i:1 thru length(tuples) do (
        /* Create an assignment from the tuple. */
        assignment: [["x",tuples[i][1]],["y",tuples[i][2]],["z",tuples[i][3]],["w",tuples[i][4]],["v",tuples[i][5]]],
        if (is(IsFormulaTrue(Model, assignment, Formula) = 1)) then (
            satTuple: tuples[i],
            i: length(tuples))),
    return(satTuple))$
    
/*
Variant of FOQuery, where we assume that the only variable of Formula without intepretation
in the given assignment is the one given as part of the input.

@param[in] Model
@param[in] Formula 
@param[in] Assignment
@param[in] Variable

@return                 Set of intepretations for the given variable which satisfie the formula.
*/
SingleFOQuery(Model, Formula, Assignment, Variable):=block([ModelDomain, satElements, extendedAssignment],
    /* Recall that a model is a pair where the first part is the domain.
    Since it is a set, we should first listify it. */
    ModelDomain: listify(Model[1]),
    /* Satisfying elements of the given model. */
    satElements: makelist(0,0),
    /* Go through all the elements of the model. */
    for i:1 thru length(ModelDomain) do (
        /* Extend the given assignment. */
        extendedAssignment: cons([Variable, ModelDomain[i]], Assignment),
        /* Check whether this new assignment satisfies the formula. */
        if (is(IsFormulaTrue(Model, extendedAssignment, Formula) = 1)) then (
            satElements: cons(ModelDomain[i],satElements))),
    return(satElements))$
	
/*
Model checking for sentences.

@param[in]  Model
@param[in]  Sentence

@return                 1 if Model \models Sentence and 0 otherwise.
*/
FOMC(Model, Formula):=block([ModelDomain, assignment],
    /* Recall that a model is a pair where the first part is the domain.*/
    ModelDomain: listify(Model[1]),
	/*Some arbitrary assignment required by IsFormulaTrue.*/
    assignment: [["x",ModelDomain[1]],["y",ModelDomain[1]],["z",ModelDomain[1]],["w",ModelDomain[1]],["v",ModelDomain[1]]],
    return(IsFormulaTrue(Model, assignment, Formula)))$
	
/*
@param[in]	Formula

@return				Set of atomic formulas the formula contains.
*/
atomicSubformulas(Formula) := block([],
    /* If the formula does not contain logical constants, then it must
    be an atomic formula. */
	if(NotContainsLogicalConstants(Formula)) then
    (return({Formula}))
    else if(charat(Formula,1)="!") then
    (return(atomicSubformulas(sremovefirst("!",Formula))))
    else if(charat(Formula,1)="U" or charat(Formula,1)="E") then(
        return(atomicSubformulas(substring(Formula,3,slength(Formula)+1))))
    else(
        D:InnerMostOperator(Formula),
        if(charat(Formula,D)="|" or charat(Formula,D)="&") then (
			return(union(atomicSubformulas(substring(Formula,2,D)),atomicSubformulas(substring(Formula,D+1,slength(Formula))))))
        else if(charat(Formula,D)="-") then (
            return(union(atomicSubformulas(substring(Formula,2,D)),atomicSubformulas(substring(Formula,D+2,slength(Formula))))))
        else (
            return(union(atomicSubformulas(substring(Formula,2,D)),atomicSubformulas(substring(Formula,D+3,slength(Formula))))))))$
			
/*
Given a conjunctive query, returns a canonical model for it.
*/
canonicalModel(CQ) := block([atomicFormulas,variables,relation],
	atomicFormulas: listify(atomicSubformulas(CQ)),
	Domain: setify(makelist(0,0)),
	Interpretation: makelist(0,0),
	for i:1 thru length(atomicFormulas) do (
		/*Calculate the variables contained in the atomic formula.*/
		variables: VariablesAtomicFormula(atomicFormulas[i]),
		/*Make sure the domain is up to date.*/
		Domain: union(Domain,setify(variables)),
		/*Update the relation corresponding to the atomic formula.*/
		relation: charat(atomicFormulas[i],1),
		if assoc(relation, Interpretation) = false then (
			/*New relation.*/
			push([relation,{variables}], Interpretation))
		else (
			/*Already existing one.*/
			previousRelation: assoc(relation, Interpretation),
			Interpretation: delete([relation, previousRelation], Interpretation),
			newRelation: union(previousRelation, {variables}),
			push([relation, newRelation], Interpretation))),
	return([Domain, Interpretation]))$
	
/*
Given two conjunctive queries, verifies whether they are equivalent.
If the two conjunctive queries are not equivalent, this function returns
a model where one of the queries is false while the other one is true.
If the two queries are equivalent, this function returns 1.
*/
equivalenceConjunctiveQueries(CQ1,CQ2) := block([],
	/*Compute the canonical models for both of the conjunctive queries.*/
	canonicalModel1: canonicalModel(CQ1),
	canonicalModel2: canonicalModel(CQ2),
	/*Verify that the first one satisfies CQ2 and the second one satisfies CQ1.*/
	firstOne: FOMC(canonicalModel1,CQ2),
	if (firstOne = 0) then (
		return(canonicalModel1)),
	secondOne: FOMC(canonicalModel2,CQ1),
	if (secondOne = 0) then (
		return(canonicalModel2)),
	return(true))$