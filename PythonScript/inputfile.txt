innerMostOperator(F, d) := block([index, c],    index: -1,    c: 0,    for i:1 thru slength(F) do (        if(charat(F,i)="(") then (              c: c + 1        )        else if(charat(F,i)=")") then (            c: c - 1        )        else if((charat(F,i)="&" or charat(F,i)="|" or charat(F,i)="-" or charat(F,i)="<") and c=d) then (            index: i,            i: slength(F)        )   ),   return(index))
clearString(CHAR,S):=block([],    for i:1 thru length(CHAR) do (        S: sremove(CHAR[i],S)    ),    return(S))
notContainsLogicalConstants(F):=block([Formula],    cleanedFormula: clearString(["S","D","!","&","|","->","<->"],F),    if (slength(cleanedFormula) = slength(F)) then (return(true))    else (return(false)))
subformulas(F) := block([subf, subf1, subf2, index],    if (notContainsLogicalConstants(F)) then (        return({F}))    else if (elementp(charat(F,1), {"S","D","!"})) then (        subf: subformulas(substring(F,2,slength(F)+1)),        return(union({F},subf)))    else (        index: innerMostOperator(F,1),        if (elementp(charat(F,index),{"|","&"})) then (            subf1: subformulas(substring(F,2,index)),            subf2: subformulas(substring(F,index + 1, slength(F))),            return(union({F},union(subf1,subf2))))        else if (charat(F,index) = "-") then (            subf1: subformulas(substring(F,2,index)),            subf2: subformulas(substring(F,index + 2, slength(F))),            return(union({F},union(subf1,subf2))))        else (            subf1: subformulas(substring(F,2,index)),            subf2: subformulas(substring(F,index + 3, slength(F))),            return(union({F},union(subf1,subf2))))))
