/*
Code for handling arithmetic terms.
@Reijo Jaakkola
@reijo.jaakkola@tuni.fi
*/

/*
This file will contain code that generates random terms in
the arithmetic vocabulary {+,*,0,1}, and also a conversion function
which converts from polish notation to infix notation.
*/

/*
Generate a random arithmetical term in Polish notation.

@param[in]      CALC    Number of summation and multiplication symbols the term should contain.
@param[in]      VAR     List of variables the term can contain.
@param[in]      ZERO    Used to prevent trivial cancelation with multiplying by 0. If ZERO true,
                        and CALC has size 0, then we can't add ZERO.

@return                 Random term of arithmetic vocabulary in polish notation
                        that contains SUM many summation symbols and MULT many multiplication
                        symbols.
*/
RandomArFormulaPolish(CALC,VAR,ZERO):=block([],
    /*If there are no summations or multiplications*/
    /*left then add a random variable to the term.*/
    if (CALC = 0) then (
        /*Add 0 and 1 to the set of possible variables.*/
        if(ZERO = 1) then (
            VAR: cons("0",VAR)),
        VAR: cons("1",VAR),
        randIndex: random(length(VAR))+1,
        return(VAR[randIndex])
    )
    else (
        /*Select randomly whether we choose summation or multiplication.*/
        coin: random(2),
        /*Then distribute the remaining resources for summation and multiplication randomly*/
        /*between the new two subformulas.*/
        dice: random(CALC),
        if (coin = 0) then (
            return(sconcat("+","(",RandomArFormulaPolish(CALC-dice-1,VAR,1),",",RandomArFormulaPolish(dice,VAR,1),")"))
        )
        else (
            return(sconcat("*","(",RandomArFormulaPolish(CALC-dice-1,VAR,0),",",RandomArFormulaPolish(dice,VAR,0),")"))
        )))$
        
/*
Generate a random arithmetical term in infix notation.

@param[in]      CALC    Number of summation and multiplication symbols the term should contain.
@param[in]      VAR     List of variables the term can contain.

@return                 Random term of arithmetic vocabulary in infix notation
                        that contains SUM many summation symbols and MULT many multiplication
                        symbols.
*/
RandomArFormulaInfix(CALC,VAR):=block([],
    /*If there are no summations or multiplications*/
    /*left then add a random variable to the term.*/
    if (CALC = 0) then (
        /*Add 0 and 1 to the set of possible variables.*/
        VAR: cons("0",VAR),
        VAR: cons("1",VAR),
        randIndex: random(length(VAR))+1,
        return(VAR[randIndex])
    )
    else (
        /*Select randomly whether we choose summation or multiplication.*/
        coin: random(2),
        /*Then distribute the remaining resources for summation and multiplication randomly*/
        /*between the new two subformulas.*/
        dice: random(CALC),
        if (coin = 0) then (
            return(sconcat("(",RandomArFormulaInfix(CALC-dice-1,VAR),"+",RandomArFormulaInfix(dice,VAR),")"))
        )
        else (
            return(sconcat("(",RandomArFormulaInfix(CALC-dice-1,VAR),"*",RandomArFormulaInfix(dice,VAR),")"))
        )))$

/*
Function which removes all the given characters from a given string.
Does not affect the original string.

@param[in]  CHAR    Characters that should be removed.
@param[in]  S       String for which we want to do the clearing.

@return             Cleared string.
*/
ClearString(CHAR,S):=block([],
    for i:1 thru length(CHAR) do (
        S: sremove(CHAR[i],S)
    ),
    return(S))$

/*
Convert a given term in Polish notation into infix notation.

This function assumes that the term does not contain variables
or constants which have lenght longer than one!

@param[in]  T   Term in polish notation.

@return         Equivalent term in infix notation.
*/

ConvertPolishToInfix(T):=block([],
    /*First clear the string from brackets and apostrophes.*/
    T: ClearString(["(",",",")"],T),
    /*A list which will be treated as stack in this function.*/
    /*Stores the next multiplication operation that will be written.*/
    OPER_STACK: [],
    /*List that will be treated as stack in this function for storing*/
    /*the next variables that the calculation will affect.*/
    VAR_STACK: [],
    /*List that will be treated as stack for storing the progress made*/
    /*on previous operators.*/
    COUNTER_STACK: [],
    /*Counter for storing the progress.*/
    counter: 0,
    for i:1 thru slength(T) do (
        if (charat(T,i) = "+" or charat(T,i) = "*") then (
            push(charat(T,i),OPER_STACK),
            /*Start a new counter.*/
            push(counter, COUNTER_STACK),
            counter: 0
        )
        /*Function treats anything that is not summation*/
        /*or multiplication symbol as a variable, and thus*/
        /*they will increase the counter.*/
        else (
            push(charat(T,i),VAR_STACK),
            counter: counter + 1
        ),
        if (counter = 2) then (
            while counter = 2 do (
                /*Pop the two variables from stack.*/
                VAR1: pop(VAR_STACK),
                VAR2: pop(VAR_STACK),
                /*Pop the operation.*/
                OPERATION: pop(OPER_STACK),
                /*Push the new string back.*/
                push(sconcat("(",VAR2,OPERATION,VAR1,")"),VAR_STACK),
                /*Pop the previous counter.*/
                counter: pop(COUNTER_STACK),
                /*Remember to increase the counter for the last operator,*/
                /*since we added now a new one.*/
                counter: counter + 1))),
    /*The resulting formula is the final element in the VAR_STACK.*/
    return(pop(VAR_STACK)))$

/*
Function for finding the index for the innermost operator
in a term.

@param[in]  T   Term for which we whish to find the innermost operation.

@return         Index for the innermost operator, or -1 if none found.
*/
/*Funktio joka etsii kaavan sisimman konnektiivin*/
InnerMostOperator(T) := block([index, c],
    index: -1,
    c: 0,
    for i:1 thru slength(T) do (
        if(charat(T,i)="(") then (  
            c: c + 1
        )
        else if(charat(T,i)=")") then (
            c: c - 1
        )
        /*Inner most operation is located in the place where c = 1.*/
        else if((charat(T,i)="*" or charat(T,i)="+") and c=1) then (
            index: i
        )
   ),
   return(index))$

/*
Helper function for converting variables from set {x,y,z,w} and constants
from {0,1} into a variable in MAXIMA.

@param[in]  v   Variable or constant that should be covnerted.

@return         Same variable or constant in MAXIMA.
*/
ConvertVariable(v) := block([],
    if (v = "x") then (return(x))
    else if (v = "y") then (return(y))
    else if (v = "z") then (return(z))
    else if (v = "w") then (return(w))
    else if (v = "0") then (return(0))
    else if (v = "1") then (return(1)))$

/*
Convert a given term in infix notation into a formula recursively.
Created because stupid STACK wont allow eval_string or parse_string
due to safety reasons.

This function assumes that the term does not contain variables
or constants which have lenght longer than one! It also assumes that
every variable belongs to the set {x,y,z,w}.

@param[in]  T   Term in infix notation.

@return         Term as formula in Maxima.
*/
ConvertInfixToFormula(T):=block([T1, T2, IndexOfInnerMostOperator],
    /*Converting variables is handled by the helper function.*/
    if (slength(T) = 1) then (
        return(ConvertVariable(T)))
    else (
        IndexOfInnerMostOperator: InnerMostOperator(T),
        T1: ConvertInfixToFormula(substring(T, 2, IndexOfInnerMostOperator)),
        T2: ConvertInfixToFormula(substring(T, IndexOfInnerMostOperator + 1, slength(T))),
        if (charat(T, IndexOfInnerMostOperator) = "+") then (
            return((T1 + T2)))
        else (
            return((T1 * T2)))))$

/*
Helper function for checking that a given string is 
representing a number.

@param[in]  C   The string.

@return         True iff C is a string representing an integer.
*/
INTEGERP(C):=block([X],
    /*First check that C is a string.*/
    if (stringp(C) = false) then (return(false)),
    X:charlist(C),
    /*We will analyse the ASCII codes for each character in C.*/
    X:map(cint,X),
    /*Check that the ASCII code for every character in C is in the interval [48,57].*/
    X:map(lambda([x], 47 < x and x < 58),X),
    if(member(false,X)) then 
        (return(false))
    else return(true))$

/*
Type conversion from string to int.
NOTE: Assumes that the input is a string representing a number.

@param[in]  C   The string.

@return         The integer that C represents.
*/
CONVINT(C):=block([X, INT],
    INT:0, X:charlist(C),
    /*We will analyse the ASCII codes for each character in C.*/
    X:map(cint,X),
    /*If c is a character representing a number, then the number is*/
    /*is the ASCII code of c minus 48.*/
    X:map(lambda([x], x - 48),X),
    /*Convert a list of digits into a number.*/
    for i:1 thru length(X) do(
        INT: INT + X[i]*10^(length(X)-i)),
    return(INT))$
            
/*
Function converts a string of the form "n", where "n" is a natural number,
into a string of the form "(1 + ... + 1)."

@param[in]  N   The string representing the number.

@return         False if conversion failed, and otherwise a string of the form (1+...+1)
                (with extra brackets).
*/
convertNumberToTerm(N):=block([number, plus],
    /*First check that N is actually a string.*/
    if (stringp(N) = false) then (return(false)),
    /*Then check that N is representing a number.*/
    if (INTEGERP(N) = false) then (return(false)),
    /*Type conversion from string to int.*/
    number: CONVINT(N),
    /*Convert N to "(1+...+1)".*/
    plus: "1",
    for i:2 thru number do (
        plus: sconcat("(",plus,"+","1)")),
    return(plus))$
    
/*
Function converts a string of the form "x^n", where "n" is a natural number > 0,
into a string of the form "(x*...*x)."

@param[in]  x   String representing the variable in "x^n".
@param[in]  n   String representing the power in "x^n".

@return         False if conversion failed, and otherwise a string of the form (x*...*x)
                (with extra brackets).
*/
convertMonomialToTerm(x,n):=block([number, term],
    /*First check that x and n are actually strings.*/
    if (stringp(x) = false or stringp(n) = false) then (return(false)),
    /*Then check that n is representing a number.*/
    if (INTEGERP(n) = false) then (return(false)),
    /*Type conversion from string to int.*/
    number: CONVINT(n),
    /*Convert x^n to "(x*...*x)".*/
    term: "x",
    for i:2 thru number do (
        term: sconcat("(",term,"*",x,")")),
    return(term))$
    
/*
Function that applies recursively convertNumberToTerm and
convertMonomialToTerm to a given polynomial given as a string.

NOTE: THIS FUNCTIONS HAS A VERY LAZY DESIGN AND THUS IT SHOULD BE USED
      ONLY IF YOU KNOW WHAT YOU ARE DOING. HERE IS A LIST OF ASSUMPTIONS THAT
      WE MAKE:
      1) THE POLYNOMIAL HAS A CORRECT SYNTAX.
      2) THERE ARE NO VARIABLES THAT HAVE LENGTH GREATER THAN 0NE.
      3) THERE ARE NO POWERS THAT HAVE LENGTH GREATER THAN ONE.

@param[in]  f   The polynomial that is given as a string.

@return         Result of applying the two functions recursively
                to f.
*/
replaceTermsInPolynomial(f):=block([Index, T1, T2],
    /*First check that f is a string.*/
    if (stringp(f) = false) then (return(false)),
    /*Try to find the innermost operator.*/
    Index: InnerMostOperator(f),
    if (Index = -1) then (
        /*Check first whether this is an integer.*/
        if (INTEGERP(f) = true) then (
            /*Apply convertNumberToTerm.*/
            return(convertNumberToTerm(f))
        ),
        /*No innermost operator and is not an integer => this is a monomial.*/
        /*Apply convert monomial to term.*/
        return(convertMonomialToTerm(charat(f,2), charat(f,4))))
    else (
        /*Apply this function recursively.*/
        T1: replaceTermsInPolynomial(substring(f, 2, Index)),
        T2: replaceTermsInPolynomial(substring(f, Index + 1, slength(f))),
        if (charat(f, Index) = "+") then (
            return(sconcat("(",T1,"+",T2,")")))
        else (
            return(sconcat("(",T1,"*",T2,")")))))$