/*
Code for generating random FO-formulas.
@Reijo Jaakkola
@reijo.jaakkola@tuni.fi
*/

/*
Global vocabulary that is used for testing these functions.
In stack exercises there will always be a global vocabulary variable.
Vocabulary is understood as a dictionary which associates with
each symbol its arity.
*/
VOC: [["P",1],["R",2]];

/*
Function for generating random atomic formulas (not identity) which must contain
a given variable. Also the atomic formula will not contain the same variable twice.

@param[in]	VARIABLE	The variable that the atomic formula should contain.
@param[in]	VARIABLES	All the variables that the formula can contain _given as a list_.
@param[in]	VOCABULARY	The vocabulary from which the we can choose relational symbol _given as a list_.

@return					Random atomic formula which contains VARIABLE.
*/
RandomAtomicFormulaWithVariable(VARIABLE, VARIABLES, VOCABULARY):=block([VARIABLES_COPY],
	/*Make a copy out of the VARIABLES*/
	VARIABLES_COPY: VARIABLES,
	/*Select randomly an index. The symbol for the atomic formula*/
	/*will be the symbol in that position in VOCABULARY.*/
	/*Note that in MAXIMA indexing starts at 1, but random(n)*/
	/*returns value from the interval [0,n-1].*/
	randomIndex: random(length(VOCABULARY)) + 1,
	Symbol: VOCABULARY[randomIndex],
	/*Keep in mind whether the varible is added or not.*/
	notAdded: true,
	/*Start creating the atomic formula as a string.*/
	AtomicFormula: sconcat(Symbol,"("),
	for i:1 thru assoc(Symbol, VOC) do (
		/*Variable to be added.*/
		VAR: "",
		/*Throw a coin wether we add VARIABLE now or not.*/
		/*Also check that if we are at the end of the formula*/
		/*and the variable has not been added, then it will be added.*/
		coin: random(2),
		if (notAdded = true and (coin = 0 or i = assoc(Symbol, VOC))) then (
			notAdded: false,
			VAR: VARIABLE
		)
		else (
			/*Similarly how we selected the symbol, select a random variable.*/
			randomIndex: random(length(VARIABLES_COPY)) + 1,
			VAR: VARIABLES_COPY[randomIndex],
			/*Remove the variable from the list.*/
			VARIABLES_COPY: delete(VAR, VARIABLES_COPY)
		),
		if (i = 1) then (
			AtomicFormula: sconcat(AtomicFormula,VAR)
		)
		else (
			AtomicFormula: sconcat(AtomicFormula,",",VAR)
		)
	),
	AtomicFormula: sconcat(AtomicFormula, ")"),
	return(AtomicFormula));

/*
Function for generating random atomic formulas (not identity). 
Also the atomic formula will not contain the same variable twice.

@param[in]	VARIABLES	All the variables that the formula can contain _given as a list_.
@param[in]	VOCABULARY	The vocabulary from which the we can choose relational symbol _given as a list_.

@return					Random atomic formula.
*/
RandomAtomicFormula(VARIABLES, VOCABULARY):=block([],
	/*Make a copy out of the VARIABLES*/
	VARIABLES_COPY: VARIABLES,
	/*Select randomly an index. The symbol for the atomic formula*/
	/*will be the symbol in that position in VOCABULARY.*/
	/*Note that in MAXIMA indexing starts at 1, but random(n)*/
	/*returns value from the interval [0,n-1].*/
	randomIndex: random(length(VOCABULARY)) + 1,
	Symbol: VOCABULARY[randomIndex],
	/*Start creating the atomic formula as a string.*/
	AtomicFormula: sconcat(Symbol,"("),
	for i:1 thru assoc(Symbol, VOC) do (
		/*Similarly how we selected the symbol, select a random variable.*/
		randomIndex: random(length(VARIABLES_COPY)) + 1,
		if not(i = 1) then (
			AtomicFormula: sconcat(AtomicFormula,",",VARIABLES_COPY[randomIndex])
		)
		else (
			AtomicFormula: sconcat(AtomicFormula,VARIABLES_COPY[randomIndex])
		),
		/*Remove the variable from the list.*/
		VARIABLES_COPY: delete(VARIABLES_COPY[randomIndex], VARIABLES_COPY)
	),
	AtomicFormula: sconcat(AtomicFormula, ")"),
	return(AtomicFormula));

/*
Possible connectives stored here as global variable.
| = OR, & = AND, -> = IF THEN, <-> = IFF
*/
CON: ["|","&","->","<->"];

/*
Function for generating random quantifier-free formulas from a given list
of atomic formulas. The formulas don't have to be distinct.

@param[in]	LAYER		Current number of formulas.
@param[in]	FORMULAS	Current list of formulas.
@param[in]	CONNECTIVES List of possible connectives.

@return					Random atomic formula.
*/
RandomQuantifierFreeFormula(LAYER, FORMULAS, CONNECTIVES):=block([],
	if (LAYER = 1) then (
		/*In the base case just return the first atomic formula from the list.*/
		return(FORMULAS[1])
	)
	else (
		/*Select randomly an index. The next connective for the atomic*/
		/*formula will be the connective in that position in CONNECTIVES.*/
		randomIndex: random(length(CONNECTIVES)) + 1,
		CONNECTIVE: CONNECTIVES[randomIndex],
		/*Similarly select the next formula randomly.*/
		randomIndex: random(length(FORMULAS)) + 1,
		FORMULA: FORMULAS[randomIndex],
		return(sconcat("(",FORMULA,CONNECTIVE,RandomQuantifierFreeFormula(LAYER - 1, delete(FORMULA, FORMULAS, 1), CONNECTIVES),")"))));