/*
Code for performing model checking for modal logic.

@Reijo Jaakkola
@reijo.jaakkola@tuni.fi
*/

/*
We agree here, that formulas F of modal logic are formed with
the following syntax

F ::= p | (F&F) | (F|F) | !F | (F->F) | (F<->F) | DF | SF
*/

/*
Function for finding whether a given set A is a subset of 
another set B.

@param[in]  A
@param[in]  B

@return         True iff A is a subset of B.
*/
subset(A,B) := block([], return(intersection(A,B) = A))$

/*
Function for finding the index where the innermost (binary) connective
in a formula begins.

@param[in]  F   Formula for which we whish to find the innermost operation.
@param[in]  d   Should be either 0 or 1, depending on whether the formula should
				contain outermost brackets or not.

@return         Index for the innermost operator, or -1 if none found.
*/
innerMostOperator(F, d) := block([index, c],
    index: -1,
    c: 0,
    for i:1 thru slength(F) do (
        if(charat(F,i)="(") then (  
            c: c + 1
        )
        else if(charat(F,i)=")") then (
            c: c - 1
        )
        /* Inner most operation is located in the place where c = d. */
        else if((charat(F,i)="&" or charat(F,i)="|" or charat(F,i)="-" or charat(F,i)="<") and c=d) then (
            index: i,
            /* Here to end the loop (why break does not work???). */
            i: slength(F)
        )
   ),
   return(index))$

/*
Function which removes all the given characters from a given string.
Does not affect the original string.

@param[in]  CHAR    Characters that should be removed.
@param[in]  S       String for which we want to do the clearing.

@return             Cleared string.
*/
clearString(CHAR,S):=block([],
    for i:1 thru length(CHAR) do (
        S: sremove(CHAR[i],S)
    ),
    return(S))$

/*
Function which checks whether a given formula contains any logical constants.

@param[in]  F       The given formula.

@return             True iff F has no logical constants.

*/
notContainsLogicalConstants(F):=block([Formula],
    cleanedFormula: clearString(["S","D","!","&","|","->","<->"],F),
    if (slength(cleanedFormula) = slength(F)) then (return(true))
    else (return(false)))$

/*
Function for forming the set of subformulas of a given formula
of modal logic.

@param[in]   F   The formula of modal logic.

@return          A set which contains all the subformulas of F.
*/
subformulas(F) := block([subf, subf1, subf2, index],
	/*If F does not contain logical constants, then return the singelton of F.*/
	if (notContainsLogicalConstants(F)) then (
		return({F}))
	/*The case of unary connectives.*/
	else if (elementp(charat(F,1), {"S","D","!"})) then (
		subf: subformulas(substring(F,2,slength(F)+1)),
		return(union({F},subf)))
	else (
		index: innerMostOperator(F,1),
		if (elementp(charat(F,index),{"|","&"})) then (
			subf1: subformulas(substring(F,2,index)),
			subf2: subformulas(substring(F,index + 1, slength(F))),
			return(union({F},union(subf1,subf2))))
		else if (charat(F,index) = "-") then (
			subf1: subformulas(substring(F,2,index)),
			subf2: subformulas(substring(F,index + 2, slength(F))),
			return(union({F},union(subf1,subf2))))
		/*Case of equivalence*/
		else (
			subf1: subformulas(substring(F,2,index)),
			subf2: subformulas(substring(F,index + 3, slength(F))),
			return(union({F},union(subf1,subf2))))))$

/*
Models of modal logic will be given as a triple

M = (W, R, V)

where W is a sequence, R is a dictionary which maps each world in W
to a subset of W and V is a dictionary which maps each propositional symbol
into a subset of W where it is true.
*/

/*
Function for calculating the set of worlds in a given Kripke model
M where the given formula F of modal logic is true.

@param[in] M	The Kripke model.
@param[in] F	Formula of modal logic.

@return         Set of worlds where the formula is true.
*/
modelChecking(M,F) := block([worldLabels, sortedSubformulas, withoutDiamond, withoutSquare, reachableStates, alreadyLabeled, subformula, index, subformula1, subformula2],
	/*
	The data-structure which maintains what formulas are
	true at each given state.
	*/
	worldLabels: [],
	/*
	Compute the subformulas of F
	and form a sorted sequence out of them
	with respect to the length of the subformulas.
	*/
	sortedSubformulas: reverse(listify(subformulas(F))),
	for i:1 thru length(sortedSubformulas) do (
		/*
		First check what kind of subformula we are dealing with.
		*/
		if (notContainsLogicalConstants(sortedSubformulas[i])) then (
			/*
			Just add all the worlds where the propositional symbol
			is true.
			*/
			push([sortedSubformulas[i], assoc(sortedSubformulas[i],M[3])], worldLabels))
		else if (charat(sortedSubformulas[i],1) = "D") then (
			/*
			Go through all the worlds and label those one which
			have a successor where the subformula after diamond holds.
			*/
			withoutDiamond: substring(sortedSubformulas[i],2,slength(sortedSubformulas[i])+1),
			labelThese: set(),
			for i:1 thru length(M[1]) do (
				reachableStates: assoc(M[1][i], M[2]),
				alreadyLabeled: assoc(withoutDiamond, worldLabels),
				if (cardinality(intersection(reachableStates, alreadyLabeled)) > 0) then (
					labelThese: union({M[1][i]},labelThese))),
			push([sortedSubformulas[i], labelThese], worldLabels))
		else if (charat(sortedSubformulas[i],1) = "S") then (
			/*
			Go through all the worlds and label those one where
			in every successor the subformula after square holds.
			*/
			withoutSquare: substring(sortedSubformulas[i],2,slength(sortedSubformulas[i])+1),
			labelThese: set(),
			for i:1 thru length(M[1]) do (
				reachableStates: assoc(M[1][i], M[2]),
				alreadyLabeled: assoc(withoutSquare, worldLabels),
				if (subset(reachableStates, alreadyLabeled)) then (
					labelThese: union({M[1][i]}, labelThese))),
			push([sortedSubformulas[i], labelThese], worldLabels))
		else if (charat(sortedSubformulas[i],1) = "!") then (
			/*
			Where is the formula after the negation false?
			*/
			subformula: substring(sortedSubformulas[i],2,slength(sortedSubformulas[i])+1),
			labelThese: set(),
			for i:1 thru length(M[1]) do (
				if (not(elementp(M[1][i], assoc(subformula, worldLabels)))) then (
					labelThese: union({M[1][i]}, labelThese))),
			push([sortedSubformulas[i], labelThese], worldLabels))
		else (
			/*
			What is the innermost connective?
			*/
			index: innerMostOperator(F,1),
			/*
			Add all the labels where the immediate subformulas hold.
			*/
			if (charat(F,index) = "|") then (
				subformula1: substring(sortedSubformulas[i],2,index),
				subformula2: substring(sortedSubformulas[i],index+1,slength(sortedSubformulas[i])),
				labelThese: set(),
				for i:1 thru length(M[1]) do (
					if (elementp(M[1][i], assoc(subformula1, worldLabels)) or elementp(M[1][i], assoc(subformula2, worldLabels))) then (
						labelThese: union({M[1][i]}, labelThese))),
				push([sortedSubformulas[i], labelThese], worldLabels))		
			else if (charat(F,index) = "&") then (
				subformula1: substring(sortedSubformulas[i],2,index),
				subformula2: substring(sortedSubformulas[i],index+1,slength(sortedSubformulas[i])),
				labelThese: set(),
				for i:1 thru length(M[1]) do (
					if (elementp(M[1][i], assoc(subformula1, worldLabels)) and elementp(M[1][i], assoc(subformula2, worldLabels))) then (
						labelThese: union({M[1][i]}, labelThese))),
				push([sortedSubformulas[i], labelThese], worldLabels))
			else if (charat(F,index) = "-") then (
				subformula1: substring(sortedSubformulas[i],2,index),
				subformula2: substring(sortedSubformulas[i],index+2,slength(sortedSubformulas[i])),
				labelThese: set(),
				for i:1 thru length(M[1]) do (
					if (not(elementp(M[1][i], assoc(subformula1, worldLabels))) or elementp(M[1][i], assoc(subformula2, worldLabels))) then (
						labelThese: union({M[1][i]}, labelThese))),
				push([sortedSubformulas[i], labelThese], worldLabels))
			else (
				subformula1: substring(sortedSubformulas[i],2,index),
				subformula2: substring(sortedSubformulas[i],index+1,slength(sortedSubformulas[i])),
				labelThese: set(),
				for i:1 thru length(M[1]) do (
					if (elementp(M[1][i], assoc(subformula1, worldLabels)) and elementp(M[1][i], assoc(subformula2, worldLabels))) then (
						labelThese: union({M[1][i]}, labelThese))
					else if (not(elementp(M[1][i], assoc(subformula1, worldLabels))) and not(elementp(M[1][i], assoc(subformula2, worldLabels)))) then (
						labelThese: union({M[1][i]}, labelThese))),
				push([sortedSubformulas[i], labelThese], worldLabels)))),
	/*Return the set of worlds that we labeled with the original formula.*/
	return(assoc(F, worldLabels)))$