/*
Code related to relational algebra.

@Reijo Jaakkola
@reijo.jaakkola@tuni.fi
*/

/*
Syntax of relational algebras is generated by the following grammar.

T ::= R | J[T,...,T] | I[T,...,T] | U[T,...,T] | C[i,j,T] | S[i_1,...,i_n,T]

where R is a relational symbol.

Relations are pairs, where the first element is an integer describing the arity of the relation,
and the second element is a set of arrays. An interpretation is a dictionary mapping
relational symbols to relations.
*/

/*
Helper function for checking that a given string is 
representing a number.

@param[in]  C   The string.
@return         True iff C is a string representing an integer.
*/
INTEGERP(C):= block([X],
    /*First check that C is a string.*/
    if (stringp(C) = false) then (return(false)),
    X:charlist(C),
    /*We will analyse the ASCII codes for each character in C.*/
    X:map(cint,X),
    /*Check that the ASCII code for every character in C is in the interval [48,57].*/
    X:map(lambda([x], 47 < x and x < 58),X),
    if(member(false,X)) then 
        (return(false))
    else return(true))$

/*
Type conversion from string to int.
NOTE: Assumes that the input is a string representing a number.

@param[in]	C   The string.
@return         The integer that C represents.
*/
CONVINT(C):=block([X, INT],
    INT:0, 
	X:charlist(C),
    /*We will analyse the ASCII codes for each character in C.*/
    X:map(cint,X),
    /*If c is a character representing a number, then the number is*/
    /*the ASCII code of c minus 48.*/
    X:map(lambda([x], x - 48),X),
    /*Convert a list of digits into a number.*/
    for i:1 thru length(X) do(
        INT: INT + X[i]*10^(length(X)-i)),
    return(INT))$

/*

*/
parseTerm(term) := block([c, subTerm, subTerms],
	c: 0,
	subTerm: "",
	subTerms: makelist(0,0),
	for i:2 thru slength(term) do (
		if (charat(term,i) = "[") then (
			c: c + 1)
		else if (charat(term,i) = "]") then (
			c: c - 1),
		if ((charat(term,i) = "," and c = 0) or (charat(term,i) = "]" and c = -1)) then (
			push(subTerm, subTerms),
			subTerm: "")
		else (
			subTerm: sconcat(subTerm,charat(term,i)))),
	return(reverse(subTerms)))$
			
/*
@param[in]	relationalSymbol
@param[in]	vocabulary
@return		Arity of the relational symbol if the symbol belonged to the vocabulary,
			and false otherwise.
*/
arity(relationalSymbol, vocabulary) := block([], return(assoc(relationalSymbol, vocabulary)))$

/*
@param[in]	relation1
@param[in]	relation2
@return     The cartesian product of the two relations.
*/
cartesianProduct(relation1, relation2) := block([product],
	/*Make a list out of the cartesian product so that we can iterate it.*/
	product: listify(cartesian_product(relation1[2], relation2[2])),
	for i:1 thru length(product) do (
		/*Flattening is needed to convert f.e. [[0,1],0] to [0,1,0].*/
		product[i]: flatten(product[i])),
	/*Combine the result with the new arity.*/
	return([relation1[1] + relation2[1],setify(product)]))$

/*
@param[in] relation1
@param[in] relation2
@return    Union of the two relations, if they have the same arities.
*/
arityDefinedUnion(relation1, relation2) := block([],
	if (not (relation1[1] = relation2[1])) then (
		return(false))
	else (
		return([relation1[1], union(relation1[2], relation2[2])])))$
		
/*
@param[in] relation1
@param[in] relation2
@return    Intersection of the two relations, if they have the same arities.
*/
arityDefinedIntersection(relation1, relation2) := block([],
	if (not (relation1[1] = relation2[1])) then (
		return(false))
	else (
		return([relation1[1], intersection(relation1[2], relation2[2])])))$

/*
@param[in]	relation
@param[in]	index1
@param[in]	index2
@return		False if the given indices were not valid.
            Otherwise the set of those tuples in the relation where the tuples agree on
            the elements in the places pointed to by the indexes.
*/
choose(index1, index2, relation) := block([listifiedRelation, output],
	/*Check the indices.*/
	if (relation[1] < index1 or relation[1] < index2) then (
		return(false)),
	/*Listify the relation so that we can iterate it.*/
	listifiedRelation: listify(relation[2]),
	output: makelist(0,0),
	for i:1 thru length(listifiedRelation) do (
		/*Add only those tuples in which the tuples indexed by index1 and index2 are equal.*/
		if (listifiedRelation[i][index1] = listifiedRelation[i][index2]) then (
			output: push(listifiedRelation[i], output))),
	/*Combine the result with the original arity.*/
	return([relation[1], setify(output)]))$
	
/*
@param[in]	relation
@param[in]  indexes		An array of indices.
@return     False if the given indices were not valid. Otherwise returns
            a relation which consists of tuples for which the elements were
			selected according to the indices specified in the array indexes.
			The arity of the output relation will be the length of the indexes array.
			Note that indexes can contain multiple times the same index.
*/
select(indexes, relation) := block([listifiedRelation, output, tuple],
	/*Check that all of the given indices are valid.*/
	for i:1 thru length(indexes) do (
		if (relation[1] < indexes[i]) then (
			return(false))),
	/*Listify the relation so that we can iterate it.*/
	listifiedRelation: listify(relation[2]),
	output: makelist(0,0),
	for i:1 thru length(listifiedRelation) do (
		tuple: makelist(0,0),
		for j:1 thru length(indexes) do (
			tuple: append([listifiedRelation[i][indexes[j]]],tuple)),
		output: push(reverse(tuple), output)),
	/*Combine the result with the new arity.*/
	return([length(indexes), setify(output)]))$
	
/*

*/
evaluateQuery(query, vocabulary, interpretation) := block([subTerms, result, indexes],
	if (elementp(query,vocabulary)) then (
		return(assoc(query,interpretation)))
	else (
		subTerms: parseTerm(substring(query,2,slength(query)+1)),
		if (charat(query,1) = "J") then (
			result: cartesianProduct(evaluateQuery(subTerms[1],vocabulary,interpretation),evaluateQuery(subTerms[2],vocabulary,interpretation)),
			for i:2 thru length(subTerms) - 1 do (
				result: cartesianProduct(result, evaluateQuery(subTerms[i+1],vocabulary,interpretation))),
			return(result))
		else if (charat(query,1) = "I") then (
			result: arityDefinedIntersection(evaluateQuery(subTerms[1],vocabulary,interpretation),evaluateQuery(subTerms[2],vocabulary,interpretation)),
			for i:1 thru length(subTerms) - 1 do (
				result: arityDefinedIntersection(result, evaluateQuery(subTerms[i+1],vocabulary,interpretation))),
			return(result))
		else if (charat(query,1) = "U") then (
			result: arityDefinedUnion(evaluateQuery(subTerms[1],vocabulary,interpretation),evaluateQuery(subTerms[2],vocabulary,interpretation)),
			for i:1 thru length(subTerms) - 1 do (
				result: arityDefinedUnion(result, evaluateQuery(subTerms[i+1],vocabulary,interpretation))),
			return(result))
		else if (charat(query,1) = "C") then (
			return(choose(CONVINT(subTerms[1]),CONVINT(subTerms[2]),evaluateQuery(subTerms[3],vocabulary,interpretation))))
		else if (charat(query,1) = "S") then (
			indexes: makelist(0,0),
			for i:1 thru length(subTerms) -1 do (
				push(CONVINT(subTerms[i]),indexes)),
			indexes: reverse(indexes),
			return(select(indexes, evaluateQuery(subTerms[length(subTerms)], vocabulary, interpretation))))
		else (
			return(false))))$