/*
Code for verifying natural deduction proofs with FO.
@Reijo Jaakkola
@reijo.jaakkola@tuni.fi
*/

/*
As usual, connectives are denoted by
A = forall, E = exists, ! = not, & = and, | = or, ->, if...then, <-> = iff
*/

/*
Safe(r) version of charat. Checks whether the given index is legal,
and in positive case calls charat.

@param[in]	A		String
@param[in]	index 

@return				-1, if index is illegal, and charat(A,index) otherwise.
*/
safeCharat(A,index):=block([],
	if (index < 1 or index > slength(A)) then (
		return(-1))
	else (
		return(charat(A,index))))$

/*
Function for finding the index where the innermost (binary) connective
in a formula begins.

@param[in]  F   Formula for which we whish to find the innermost operation.
@param[in]  d   Should be either 0 or 1, depending on whether the formula should
				contain outermost brackets or not.

@return         Index for the innermost operator, or -1 if none found.
*/
innerMostOperator(F, d) := block([index, c],
    index: -1,
    c: 0,
    for i:1 thru slength(F) do (
        if(charat(F,i)="(") then (  
            c: c + 1
        )
        else if(charat(F,i)=")") then (
            c: c - 1
        )
        /* Inner most operation is located in the place where c = d. */
        else if((charat(F,i)="&" or charat(F,i)="|" or charat(F,i)="-" or charat(F,i)="<") and c=d) then (
            index: i,
            /* Here to end the loop (why break does not work???). */
            i: slength(F)
        )
   ),
   return(index))$
  
/*
Function which adds outermost brackets to a formula if it does not have one.

@param[in]	F	Formula

@return			F or (F).
*/
addOutermostBrackets(F) := block([result],
	result: innerMostOperator(F,0),
	if(not(result = -1)) then (
		return(sconcat("(",F,")")))
	else (
		return(F)))$

/*
Function which removes all the given characters from a given string.
Does not affect the original string.

@param[in]  CHAR    Characters that should be removed.
@param[in]  S       String for which we want to do the clearing.

@return             Cleared string.
*/
clearString(CHAR,S):=block([],
    for i:1 thru length(CHAR) do (
        S: sremove(CHAR[i],S)
    ),
    return(S))$

/*
Function which checks whether a given formula contains any logical constants.

@param[in]  F       The given formula.

@return             True iff F has no logical constants.
*/
notContainsLogicalConstants(F):=block([Formula],
    cleanedFormula: clearString(["A","E","!","&","|","->","<->"],F),
    if (slength(cleanedFormula) = slength(F)) then (return(true))
    else (return(false)))$

/*
Function which verifies whether a given string represents a FO formula.

@param[in] F				String
@param[in] AtomicFormulas	Set of atomic formulas that F can contain.
@param[in] Variables		Set of variables that F can contain.

@return 					True iff F represents a FO formula.
*/	
isFoFormula(F, AtomicFormulas):=block([],
	if (notContainsLogicalConstants(F)) then (
		return(elementp(F, AtomicFormulas)))
	else if (safeCharat(F,1) = "!") then (
		return(true))
	else if (safeCharat(F,1) = "A" or safeCharat(F,1) = "E") then (
		return(true))
	else (
		D: innerMostOperator(F, 1),
		if (safeCharat(F,D) = "|") then (
			return(true))
		else if (safeCharat(F,D) = "&") then (
			return(true))
		else if (safeCharat(F,D) = "-") then (
			return(true))
		else if (safeCharat(F,D) = "<") then (
			return(true))
		else (
			return(false))))$