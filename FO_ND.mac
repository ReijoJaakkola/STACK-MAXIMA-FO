/*
Code for verifying natural deduction proofs with FO.
@Reijo Jaakkola
@reijo.jaakkola@tuni.fi
*/

/*
As usual, connectives are denoted by
A = forall, E = exists, ! = not, & = and, | = or, ->, if...then, <-> = iff
*/

/*
Safe(r) version of charat. Checks whether the given index is legal,
and in positive case calls charat.

@param[in]	A		String
@param[in]	index 

@return				false, if index is illegal, and charat(A,index) otherwise.
*/
safeCharat(A,index):=block([],
	if (not(stringp(A)) or index < 1 or index > slength(A)) then (
		return(false))
	else (
		return(charat(A,index))))$

/*
Safe(r) version of substring. Checks whether the given indexes are lega,
and in positive case calls substring.

@param[in]	A			String
@param[in]	startIndex
@param[in]	endIndex

@return				false, if indexes were illegal, and substring(A, startIndex, endIndex) otherwise.
*/
safeSubstring(A,startIndex,endIndex) := block([],
	if (not(stringp(A)) or startIndex < 1 or endIndex > slength(A) + 1 or startIndex > endIndex) then (
		return(false))
	else (
		return(substring(A,startIndex,endIndex))))$

/*
Helper function for checking that a given string is 
representing a number.

@param[in]  C   The string.

@return         True iff C is a string representing an integer.
*/
INTEGERP(C):=block([X],
    /*First check that C is a string.*/
    if (stringp(C) = false) then (return(false)),
    X:charlist(C),
    /*We will analyse the ASCII codes for each character in C.*/
    X:map(cint,X),
    /*Check that the ASCII code for every character in C is in the interval [48,57].*/
    X:map(lambda([x], 47 < x and x < 58),X),
    if(member(false,X)) then 
        (return(false))
    else return(true))$

/*
Type conversion from string to int.
NOTE: Assumes that the input is a string representing a number.

@param[in]  C   The string.

@return         The integer that C represents.
*/
CONVINT(C):=block([X, INT],
    INT:0, 
	X:charlist(C),
    /*We will analyse the ASCII codes for each character in C.*/
    X:map(cint,X),
    /*If c is a character representing a number, then the number is*/
    /*is the ASCII code of c minus 48.*/
    X:map(lambda([x], x - 48),X),
    /*Convert a list of digits into a number.*/
    for i:1 thru length(X) do(
        INT: INT + X[i]*10^(length(X)-i)),
    return(INT))$

/*
Function for finding the index where the innermost (binary) connective
in a formula begins.

@param[in]  F   Formula for which we whish to find the innermost operation.
@param[in]  d   Should be either 0 or 1, depending on whether the formula should
				contain outermost brackets or not.

@return         Index for the innermost operator, or -1 if none found.
*/
innerMostOperator(F, d) := block([index, c],
    index: -1,
    c: 0,
    for i:1 thru slength(F) do (
        if(charat(F,i)="(") then (  
            c: c + 1
        )
        else if(charat(F,i)=")") then (
            c: c - 1
        )
        /* Inner most operation is located in the place where c = d. */
        else if((charat(F,i)="&" or charat(F,i)="|" or charat(F,i)="-" or charat(F,i)="<") and c=d) then (
            index: i,
            /* Here to end the loop (why break does not work???). */
            i: slength(F)
        )
   ),
   return(index))$
  
/*
Function which adds outermost brackets to a formula if it does not have one.

@param[in]	F	Formula

@return			F or (F).
*/
addOutermostBrackets(F) := block([result],
	result: innerMostOperator(F,0),
	if(not(result = -1)) then (
		return(sconcat("(",F,")")))
	else (
		return(F)))$

/*
Function which removes all the given characters from a given string.
Does not affect the original string.

@param[in]  CHAR    Characters that should be removed.
@param[in]  S       String for which we want to do the clearing.

@return             Cleared string.
*/
clearString(CHAR,S):=block([],
    for i:1 thru length(CHAR) do (
        S: sremove(CHAR[i],S)
    ),
    return(S))$

/*
Function which checks whether a given formula contains any logical constants.

@param[in]  F       The given formula.

@return             True iff F has no logical constants.

*/
notContainsLogicalConstants(F):=block([Formula],
    cleanedFormula: clearString(["A","E","!","&","|","->","<->"],F),
    if (slength(cleanedFormula) = slength(F)) then (return(true))
    else (return(false)))$

/*
Function which verifies whether a given string represents a FO formula.

@param[in] F				String
@param[in] atomicFormulas	Set of atomic formulas that F can contain.
@param[in] variables		Set of variables that F can contain.

@return 					True iff F represents a FO formula.
*/	
isFoFormula(F, atomicFormulas, variables):=block([],
	if (not(stringp(F))) then (
		return(false)),
	if (notContainsLogicalConstants(F)) then (
		return(elementp(F, atomicFormulas)))
	else if (safeCharat(F,1) = "!") then (
		return(true))
	else if (safeCharat(F,1) = "A" or safeCharat(F,1) = "E") then (
		if (not(elementp(safeCharat(F,2), variables))) then (
			return(false))
		else (
			return(isFoFormula(safeSubstring(F,3,slength(F)+1), atomicFormulas, variables))))
	else (
		D: innerMostOperator(F, 1),
		if (safeCharat(F,D) = "|" or safeCharat(F,D) = "&") then (
			return(isFoFormula(substring(F,2,D),atomicFormulas,variables) and isFoFormula(substring(F,D+1,slength(F)+1),atomicFormulas,variables)))
		else if (safeCharat(F,D) = "-") then (
			return(isFoFormula(substring(F,2,D),atomicFormulas,variables) and isFoFormula(substring(F,D+2,slength(F)+1),atomicFormulas,variables)))
		else if (safeCharat(F,D) = "<") then (
			return(isFoFormula(substring(F,2,D),atomicFormulas,variables) and isFoFormula(substring(F,D+3,slength(F)+1),atomicFormulas,variables)))
		else (
			return(false))))$
			
/*
Example deductions:
OL ExEyA
		<AO EyA
				<AO A
				 ET3 ExA
				 ET4 EyExA>
		EE EyExA>
EE EyExA

OL A & B
KE1 A
KE1 B
KT2,3 B&A

Thus users indicate that they start a sub-deduction using '<' and '>'.
*/

/*
@param[in] Ded              The deduction given as an array.
@return 					True iff each sub-deduction that is started also ends.
*/
checkSubDeductions(Ded):=block([i,Counter],
	Counter: 0,
	for i:1 thru length(Ded) do
	(if(charat(Ded[i],1)="<") then
	(Counter: Counter + 1),
	if(charat(Ded[i],slength(Ded[i]))=">") then
	(Counter: Counter - 1)),
	if(Counter = 0) then
	(return(true))
	else(return(false)))$

/*
@param[in] claim			A single row in a deduction.
@return                     False if the row had incorrect form. Otherwise 
                            returns the formula that appeared in the row.
*/
checkDeductionRow(claim):=block([],
	start: safeSubstring(claim,1,3),
	if (safeCharat(start,1) = "<") then (
		return(checkDeductionRow(safeSubstring(start,2,slength(start)+1))))
	else if (start = "DT" or start = "DE" or start = "KE" or start = "RE" or start = "NE") then (
		/*These rows should have the form STRING INTEGER STRING.*/
	    j:3,
		while (INTEGERP(safeCharat(claim,j)) and j <= slength(claim)) do (
			j:j+1),
		if (j = 3 or j > slength(claim)) then (
			return(false))
		else (
			return(addOutermostBrackets(safeSubstring(claim,j,slength(claim)+1)))))
	else if(start = "KT" or start = "IE" or start = "EE") then (
		/*These rows should have the form STRING INTEGER , INTEGER STRING.*/
		j:3,
		while (INTEGERP(safeCharat(claim,j)) and j <= slength(claim)) do (
			j:j+1),
		if (j = 3 or not (is(safeCharat(claim,j) = ",")) or j > slength(claim)) then (
			return(false))
		else (
			k:j+1,
			while (INTEGERP(safeCharat(claim,k)) and k <= slength(claim)) do (
				k:k+1),
			if (k = j+1 or k > slength(claim)) then (
				return(false))
			else (
				return(addOutermostBrackets(safeSubstring(claim,k,slength(claim)+1))))))
	else if(FIRSTP="IT" or FIRSTP="NT" or FIRSTP="OL" or FIRSTP="AO" or FIRSTP="ET") then (
		/*These rows just have the form STRING STRING.*/
		return(addOutermostBrackets(safeSubstring(claim,3,slength(claim)+1))))
	else (
		return(false)))$
		
/*
@param[in] Ded				The deduction given as an array.
@return						True iff each row in the deduction has the correct form.
*/
checkDeductionForm(Ded):=block([],
	output: map(checkDeductionRow,Ded),
	if (elementp(false,setify(output))) then (
		return(false))
	else (
		return(output)))$

/*
Function that verifies that the deduction has been written correctly.

@param[in]	Ded				The deduction as an array.
@param[in]	atomicFormulas	Atomic formulas that can appear in the formulas in the deduction.
@param[in]  variables		Variables that can appear in the deduction.
@return						True iff (hopefully) the deduction has a correct form.
*/
validateDeductionForm(Ded, atomicFormulas, variables):=block([],
	/*Check that every subdeduction that begins also ends.*/
	if (checkSubDeductions(Ded) = false) then (
		return(false))
	else (
		/*Obtain the formulas that appear in the deduction.*/
		output: checkDeductionForm(Ded),
		if (output = false) then (
			/*Deduction had incorrect form.*/
			return(false))
		else (
			/*Verify that each formula is syntactically correct.*/
			valid: false,
			for i:1 thru length(output) do (
				valid: isFoFormula(output[i],atomicFormulas,variables)),
			return(valid))))$
			
/*
Next will be the functions used to verify that specific
deduction rules have been used correctly.
*/

/*
Verify that elimination of disjunction has been used correctly.

@param[in]	proposition		Disjunction used in the proof.
@param[in]  knowledge		What is currently known.
@param[in]	conclusion		What is being derived from the disjunction.

@return						True iff proposition has the form (A|B) and 
                            both (A->conclusion) and (B->conclusion) are in knowledge.
*/
DE(proposition, knowledge, conclusion) := block([index, A, B, C1, C2],
	/*Start by verifying that proposition has the form (A|B).*/
	index: innerMostOperator(proposition,1),
	if (not(is(safeCharat(proposition, index) = "|"))) then (
		return(false))
	else (
		/*Extract the relevant subformulas.*/
		A: safeSubstring(proposition, 2, index),
		B: safeSubstring(proposition, index+1, slength(proposition)),
		/*Form the implications that have to be in knowledge.*/
		C1: sconcat("(",A,"->",conclusion,")"),
		C2: sconcat("(",B,"->",conclusion,")"),
		/*Verify that they belong to the knowledge.*/
		if (elementp(C1,knowledge) and elementp(C2,knowledge)) then (
			return(true))
		else (
			return(false))))$

/*
Verify that introduction of disjunction has been used correctly.

@param[in]	proposition
@param[in]	conclusion

@return					True iff conclusion is of the form (A|proposition) or (proposition|A).
*/
DT(proposition, conclusion) := block([index, A, B],
	/*Start by verifying that conclusion is of the form (A|B).*/
	index: innerMostOperator(conclusion, 1),
	if (not(is(safeCharat(conclusion, index) = "|"))) then (
		return(false))
	else (
		/*Extract the two formulas that are joined togethor with disjunction.*/
		A: safeSubstring(conclusion, 2, index),
		B: safeSubstring(conclusion, index+1, slength(conclusion)),
		/*Verify that proposition is either A or B.*/
		if (is(proposition = A) or is(proposition = B)) then (
			return(true))
		else (
			return(false))))$

/*
Verify that elimination of implication has been used correctly.

@param[in]	proposition
@param[in]	implication
@param[in]	conclusion

@return					True iff implication = (proposition->conclusion).
*/
IE(proposition, implication, conclusion) := block([index, A, B],
	/*Start by verifying that implication is of the form (A->B).*/
	index: innerMostOperator(implication, 1),
	if (not(is(safeCharat(implication, index) = "-"))) then (
		return(false))
	else (
		/*Extract the two formulas that are joined togethor with an implication.*/
		A: safeSubstring(implication, 2, index),
		B: safeSubstring(implication, index+2, slength(implication)),
		/*Verify that A = proposition and B = conclusion.*/
		if (is(proposition = A) and is(conclusion = B)) then (
			return(true))
		else (
			return(false))))$

/*
Verify that introduction of implication has been used correctly.

@param[in]	conclusion
@param[in]	knowledge

@return					True iff conclusion has the form (A->B) and it 
                        belongs to knowledge.
*/
IT(conclusion, knowledge) := block([index],
	index: innerMostOperator(conclusion, 1),
	if (not(is(safeCharat(conclusion, index) = "-"))) then (
		return(false)),
	return(elementp(conclusion, knowledge)))$

/*
Verify that elimination of conjunction has been used correctly.

@param[in]	proposition
@param[in]  conclusion

@return					True iff proposition has either the form (A&conclusion)
						or (conclusion&A).
*/
KE(proposition, conclusion) := block([index, A, B],
	/*Start by verifying that proposition has the form (A&B).*/
	index: innerMostOperator(conclusion, 1),
	if (not(is(safeCharat(conclusion, index) = "&"))) then (
		return(false))
	else (
		/*Extract the two subformulas that are joined togethor with conjunction.*/
		A: safeSubstring(proposition,2,index),
		B: safeSubstring(proposition,index+1,slength(proposition)),
		/*Verify that conclusion is either of them.*/
		if (is(proposition = A) or is(proposition = B)) then (
			return(true))
		else (
			return(false))))$

/*
Verify that introduction of conjunction has been used correctly.

@param[in]	proposition1
@param[in]	proposition2
@param[in]	conclusion

@return					True iff conclusion has either the form (proposition1&proposition2)
                        or (proposition2&proposition1).
*/
KT(proposition1, proposition2, conclusion) := block([],
	if(is(sconcat("(",proposition1,"&",proposition2,")")=conclusion) or is(sconcat("(",proposition2,&,proposition1,")")=conclusion)) then (
		return(true))
	else (
		return(false)))$

/*
Verify that elimination of negation has been used correctly.

@param[in] proposition		The proposition that is been used to prove the claim.
@param[in] conclusion		What was the conclusion drawn from the proposition.

@return 					True iff the rule has been used correctly.
*/
NE(proposition, conclusion) := block([], return(is(sconcat("!!",conclusion) = proposition)))$

/*
Verify that introduction of negation has been used correctly.

@param[in] propositions     What is currently known.
@param[in] conclusion       What was the conclusion drawn from the propositions.

@return                     True iff the rule has been used correctly.
*/
NT(propositions, conclusion) := block([valid, conc, assm, index1, index2, assm1, assm2, assm3, assm4],
	if (not(safeCharat(conclusion,1) = "!")) then (
		return(false))
	else (
		/*If conclusion = !A, then we have to check that propositions contain a formula*/
		/*of the form A->(B&!B) i.e. from A follows a contradiction.*/
		valid: false,
		conc: safeSubstring(conclusion, 2, slength(conclusion) + 1),
		assm: listify(propositions),
		for i:1 thru length(assm) do (
			index1: innerMostOperator(assm[i],1),
			if (is(safeCharat(assm[i], index1) = "-")) then (
				assm1: safeSubstring(assm[i],2,index1),
				assm2: safeSubstring(assm[i],index1+2,slength(assm[i])),
				index2: innerMostOperator(assm2,1),
				if (is(safeCharat(assm2, index2) = "&")) then (
					assm3: safeSubstring(assm2, 2, index2),
					assm4: safeSubstring(assm2, index2+1, slength(assm2)),
					if (is(assm1 = conc) and (is(assm3 = sconcat("!",assm4)) or is(assm4 = sconcat("!",assm3)))) then (
						valid: true)))),
		return(valid)))$

/*
Verify that re-introduction of known proposition is used
correctly.

@param[in] proposition1
@param[in] proposition2

@return						True iff proposition1 == proposition2.
*/
RE(proposition1,proposition2):=block([], return (is(proposition1 = proposition2)))$

/*
Verify that elimination of equivalence has been used
correctly.

@param[in]	proposition
@param[in]	equivalence
@param[in]	conclusion

@return						True iff equivalence is of the form (proposition <-> conclusion) or (conclusion <-> proposition)
*/
EE(proposition,equivalence,conclusion):=block([],
	if(not(Equiv = sconcat("(",proposition,"<->",conclusion,")")) and not(equivalence = sconcat("(",conclusion,"<->",proposition,")"))) then (
		return(false))
	else (
		return(true)))$
		
/*
Verify that introduction of equivalence has been used
correctly.

@param[in] 	knowledge
@param[in]	conclusion

@return						True iff conclusion is of the form (A<->B), and both
							(A->B) \in knowledge and (B->A) \in knowledge.
*/
ET(knowledge, conclusion) := block([index,A,B],
	/*Start by verifying that conclusion is of the form (A<->B).*/
	index: innerMostOperator(conclusion,1),
	if(not(is(safeCharat(conclusion,index) = "<"))) then (
		return(false))
	else (
		A: safeSubstring(conclusion,2,index),
		B: safeSubstring(conclusion,index+3,slength(conclusion)),
		if(elementp(sconcat("(",A,"->",B,")"),knowledge) and elementp(sconcat("(",B,"->",A,")"))) then (
			return(true))
		else (
			return(false))))$

/*
For rules concerning quantifiers we have to keep track of what variables
appear free in what formulas. For that purpose there should exists a global array
FREEVARIABLES which contains this information. In the rules that follow the FREEVARIABLES
refers exactly to such a dictionary where the formula is the key and the value is a set of
variables e.q.

FREEVARIABLES = [["A",{"x","y"}]]

and the variables can be recovered using assoc("A",FREEVARIABLES)
*/
			
/*
Verify that elimination of universal quantifier has been
used correctly.

@param[in]	proposition
@param[in]	conclusion

@return						True iff Ax conclusion = proposition.
*/
UniversalElimination(proposition, conclusion) := block([A],
	if (not(safeCharat(proposition,1) = "A")) then (
		return(false))
	else (
		A: safeSubstring(proposition,3,slength(proposition)+1),
		if (is(A = conclusion)) then (
			return(true))
		else (
			return(false))))$

/*
Verify that introduction of universal quantifier has been
used correctly.

@param[in] proposition
@param[in] conclusion

@return						True iff 
*/
UniversalIntroduction(proposition, conclusion) := block([],
	if (not(safeCharat(conclusion,1) = "A")) then (
		return(false))
	else if (not(is(conclusion = sconcat(safeSubstring(conclusion,1,3),proposition)))) then (
		return(false))
	else if (elementp(safeCharat(conclusion,2), assoc(proposition, FREEVARIABLES))) then (
		return(false))
	else (
		return(true)))$

/*
Verify that introduction of existential quantifier has been
used correctly.

@param[in]	proposition
@param[in]	conclusion

@return						True iff Ex conclusion = proposition
*/
ExistentialIntroduction(proposition, conclusion) := block([A],
	if (not(safeCharat(conclusion,1) = "E")) then (
		return(false))
	else (
		A: safeSubstring(conclusion,3,slength(conclusion)+1),
		if (is(A = proposition)) then (
			return(true))
		else (
			return(false))))$